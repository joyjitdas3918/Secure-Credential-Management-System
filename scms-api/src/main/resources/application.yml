# Server Configuration
server:
  port: 8080 # Default port for the application

# Spring Application Name
spring:
  application:
    name: scms-api

  # Datasource Configuration (for PostgreSQL)
  datasource:
      # IMPORTANT: This URL is for your Render production database.
      # It must be exact and start with 'jdbc:postgresql://'
      url: jdbc:postgresql://dpg-d1fu51ffte5s73fvrdh0-a.oregon-postgres.render.com/scms_db_y42e
      username: joyjit # Your Render database username
      password: POqI2YKCLYU9ZroaE51jEtP07AJeguiu # Your Render database password
      driver-class-name: org.postgresql.Driver
      hikari:
        connection-timeout: 30000
        maximum-pool-size: 10
        minimum-idle: 2
  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: update # 'update' will update schema to match entities.
        # 'create-drop' creates and drops schema on startup/shutdown (good for tests).
        # 'validate' checks schema but makes no changes.
        # 'none' disables DDL generation.
      # For production, prefer 'validate' or 'none' and use Flyway/Liquibase for migrations.
    show-sql: true # Log SQL statements to console (set to false for production)
    properties:
      hibernate:
        format_sql: true # Format the SQL for readability
        dialect: org.hibernate.dialect.PostgreSQLDialect # Specify PostgreSQL dialect

  # Security Configuration (basic setup - detailed config in Java class)
  security:
    user:
      name: admin
      password: '{noop}password' # {noop} means no encoding. FOR DEVELOPMENT ONLY.
      # In real apps, passwords should be securely hashed (e.g., BCrypt).

# SCMS Custom Properties
scms:
  encryption:
    secret-key: R1V5cWpobmFYWTRrNVo2YmQ5cGNrMzFxN3c4ZTAxcmI=
  jwt:
    secret: "YourJWTSecretKeyThatIsAtLeast256BitLongAndSecurelyStored" # Used for signing JWTs
    # Similar security considerations as above
    expiration: 3600000 # Token validity in milliseconds (1 hour)

# Logging Configuration
logging:
  level:
    root: INFO
    com.joyjit.scms: DEBUG # Set your application packages to DEBUG for detailed logs
    org.springframework.web: DEBUG # To see HTTP requests/responses
    org.hibernate.SQL: DEBUG # To see executed SQL queries (same as jpa.show-sql)
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE # To see SQL parameters
    org.springframework.security: DEBUG

  file:
    name: logs/scms-api.log # Log to a file
    max-size: 10MB # Max file size before rollover
    max-history: 7 # Keep 7 days of compressed history


# Spring Boot Actuator Endpoints (for monitoring and management)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Expose these endpoints over HTTP
  endpoint:
    health:
      show-details: always # Show more details on the health endpoint

